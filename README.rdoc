= bitcoin-client

Provides a Ruby library to the complete Bitcoin JSON-RPC API. Implements all methods listed
at {https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list}[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list].
Also supports customizing the host and port number to connect to.

== Installation

On Ruby 1.9, you can just install the gem and start using it. On 1.8, the 'json' gem is also required, so you'll need to install that first:

  gem install json

Or, if you're using Bundler (and you should be), just add it to the Gemfile:

  gem 'json', '~> 1.5.3'

== Usage

As with most Ruby gems, you first need to require the library into your project:

  require 'bitcoin'

After doing this, the simplest possible usage looks like this:

  Bitcoin('username', 'password').balance
  # => 0.001

Or, if you prefer a somewhat more explicit representation, the following code performs the exact
same task:

  client = Bitcoin::Client.new('username', 'password')
  client.balance
  # => 0.001
  
The third and final way to use the library is by taking advantage of a simple DSL:

  include Bitcoin
  
  # set up credentials
  username 'username'
  password 'password'
  
  balance
  # => 0.001
  
  accounts
  # => {"account" => 0.001}
  
The RPC method names available to you are exactly the same as those listed on the Bitcoin wiki
(again, that's {https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list}[https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list]). Some aliases
have been added to make them more "ruby-ish," but none of the original names have been changed.


== Host, Port and SSL

Here are several examples of how you can change the host information:

  Bitcoin('username', 'password', :host => 'example.com', :port => 38332, :ssl => true)
  
  client = Bitcoin::Client.new('username', 'password', :host => 'example.com')
  client.port = 38332
  client.ssl = true
  client.ssl?
  # => true
  
  include Bitcoin
  host 'example.com'
  port 38332
  ssl?
  # => false
  ssl true
  ssl?
  # => true

You should see the Bitcoin::Client class documentation if you'd like to see the other options and methods
that are made available.

== Wallet Encryption

  client.encrypt("password")
  client.unlock("password", 20)
  client.lock

= Abstractions

== Wallet

    wallet = BitWallet.new(:username => 'username', :password => 'password')
    wallet.accounts.with_balance # returns array of the accounts with balance > 0
    account = wallet.accounts.new('account name')
    account.addresses.count # 1, as it already comes with an address
    account.balance # returns the balance of the account
    address = account.addresses.new
    address.address # 8hdsakdjh82d9327ccb64642c - the address hash
    account.send_amount 5.5, to: '8hdsakdjh82d9327ccb64642c' # sends 5.5 bitcoin to the address
    account.send_amount 5.5, to: address # sends 5.5 bitcoin to the BitWallet::Address#address
    account.total_received # returns the total amount received by the account
    account.transactions # returns array of 10 BitWallet::Transaction
    account.transactions(limit: 5) # returns array of 5 BitWallet::Transaction
    address.total_received # returns the total amount received by the address

== Transaction

A transaction has the following methods:

- `account`: the account it belongs to
- `address`: the address it belongs to
- `amount`: how much was transferred
- `category`: returns the category value of the transaction
- `confirmation`: how many times this has been confirmed by the network
- `id`: the transaction id
- `occurred_at`: Ruby Time object for the `time` value returned by bitcoind
- `received_at`: Ruby Time object for the `timereceived` value returned by bitcoind
